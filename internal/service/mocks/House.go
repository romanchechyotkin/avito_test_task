// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/romanchechyotkin/avito_test_task/internal/entity"
	mock "github.com/stretchr/testify/mock"

	service "github.com/romanchechyotkin/avito_test_task/internal/service"
)

// House is an autogenerated mock type for the House type
type House struct {
	mock.Mock
}

// CreateHouse provides a mock function with given fields: ctx, input
func (_m *House) CreateHouse(ctx context.Context, input *service.HouseCreateInput) (*entity.House, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateHouse")
	}

	var r0 *entity.House
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.HouseCreateInput) (*entity.House, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.HouseCreateInput) *entity.House); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.House)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.HouseCreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, input
func (_m *House) CreateSubscription(ctx context.Context, input *service.CreateSubscriptionInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateSubscriptionInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHouseFlats provides a mock function with given fields: ctx, input
func (_m *House) GetHouseFlats(ctx context.Context, input *service.GetHouseFlatsInput) ([]*entity.Flat, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetHouseFlats")
	}

	var r0 []*entity.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.GetHouseFlatsInput) ([]*entity.Flat, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.GetHouseFlatsInput) []*entity.Flat); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.GetHouseFlatsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHouse creates a new instance of House. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHouse(t interface {
	mock.TestingT
	Cleanup(func())
}) *House {
	mock := &House{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
