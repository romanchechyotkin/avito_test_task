// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/romanchechyotkin/avito_test_task/internal/entity"
	mock "github.com/stretchr/testify/mock"

	service "github.com/romanchechyotkin/avito_test_task/internal/service"
)

// Flat is an autogenerated mock type for the Flat type
type Flat struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: ctx, input
func (_m *Flat) CreateFlat(ctx context.Context, input *service.FlatCreateInput) (*entity.Flat, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 *entity.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.FlatCreateInput) (*entity.Flat, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.FlatCreateInput) *entity.Flat); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.FlatCreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlat provides a mock function with given fields: ctx, input
func (_m *Flat) UpdateFlat(ctx context.Context, input *service.FlatUpdateInput) (*entity.Flat, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlat")
	}

	var r0 *entity.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.FlatUpdateInput) (*entity.Flat, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.FlatUpdateInput) *entity.Flat); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.FlatUpdateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFlat creates a new instance of Flat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlat(t interface {
	mock.TestingT
	Cleanup(func())
}) *Flat {
	mock := &Flat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
